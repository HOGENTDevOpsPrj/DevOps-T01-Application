@page "/admin/reservations"

@inject IReservationService reservationService;
@inject NavigationManager navManager;

@using System.Net.Http.Json
@using Blanche.Shared.Reservations;
@using MudBlazor

@inject HttpClient httpClient


<MudTable Items="@Reservations" T="ReservationDto" Dense="@dense" Hover="@hover"
          Bordered="@bordered" Striped="@striped"
          Filter="new Func<ReservationDto,bool>(FilterFunction)" @bind-SelectedItem="selectedReservation">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Overzicht open reservaties</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Naam</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Formule</MudTh>
        <MudTh>Aantal personen</MudTh>
        <MudTh>Datum aanvraag</MudTh>
        <MudTh>Totaal prijs</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Naam">@context.Customer?.FirstName</MudTd>
        <MudTd DataLabel="Naam">@context.Customer?.Email</MudTd>
        <MudTd DataLabel="Formule">@context.Formula?.Name</MudTd>
        <MudTd DataLabel="Aantal personen">@context.NumberOfPersons</MudTd>
        <MudTd DataLabel="Aantal personen">@context.StartDate</MudTd>
        <MudTd DataLabel="Totaal prijs">@string.Format("{0:F2}", context.TotalPrice) €</MudTd>
        <MudTd>
            <MudButton @onclick="() => HandleOnRowClick(context.Id)">
                <MudIcon Icon="@Icons.Material.Filled.Edit" />
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Geselecteerde klant: @selectedReservation?.Customer?.Email</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private string searchString = "";

    private ReservationDto selectedReservation = null;

    private HashSet<ReservationDto> selectedItems = new HashSet<ReservationDto>();
    private IEnumerable<ReservationDto> Reservations = new List<ReservationDto>();

    protected override async Task OnInitializedAsync()
    {
        Reservations = await httpClient.GetFromJsonAsync<List<ReservationDto>>("api/reservation");
    }

    private void HandleOnRowClick(Guid guid)
    {
        navManager.NavigateTo($"/reservation/{guid.ToString()}/edit");
    }

    // private void HandleOnRowClick(TableRowClickEventArgs<ReservationDto> args)
    // {
    //     navManager.NavigateTo($"/reservation/{args.Item.Id}");
    // }

    private bool FilterFunction(ReservationDto reservation) => FilterFunc(reservation, searchString);

    private bool FilterFunc(ReservationDto reservation, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (reservation.Customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (reservation.Customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (reservation.Customer.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }


}
